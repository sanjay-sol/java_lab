
8.weather forecast

import java.io.IOException;

import java.util.Iterator;

import org.apache.hadoop.fs.Path;

import org.apache.hadoop.io.LongWritable;

import org.apache.hadoop.io.Text;

import org.apache.hadoop.mapreduce.lib.input.*;

import org.apache.hadoop.mapreduce.lib.output.*;

import org.apache.hadoop.mapreduce.Job;

import org.apache.hadoop.mapreduce.Mapper;

import org.apache.hadoop.mapreduce.Reducer;

import org.apache.hadoop.conf.Configuration;

public class Weather

{

  public static class MaxTemperatureMapper extends Mapper<LongWritable, Text, Text, Text>

  {

    @Override

    public void map(LongWritable arg0, Text value, Context context) throws IOException, InterruptedException

    {

      String line = value.toString();

      if(!(line.length()==0))

      {

        String date = line.substring(6,14);

        float temp_Max = Float.parseFloat(line.substring(39,45).trim());

        float temp_Min = Float.parseFloat(line.substring(47,53).trim());

        if(temp_Max > 35.0)

        {

          //Hot day

          context.write(new Text("Hot Day" + date), new Text(String.valueOf(temp_Min)));

        }

        if(temp_Min<10)

        {

          //cold day

          context.write(new Text("Cold day" + date), new Text(String.valueOf(temp_Min)));

        }

      }

    }

  }

  public static class MaxTemperatureReducer extends Reducer<Text, Text, Text, Text>

  {

    public void reduce(Text key, Iterator<Text> values, Context context) throws IOException, InterruptedException

    {

      String temperature = values.next().toString();

      context.write(key, new Text(temperature));

    }

  }

  @SuppressWarnings("deprecation")

  public static void main(String[] args) throws Exception

  {

    //reads the default configuration of cluster from cluster configuration

    Configuration conf = new Configuration();

    Job job = new Job();

    job.setJarByClass(Weather.class);

    job.setReducerClass(MaxTemperatureReducer.class);

    job.setMapperClass(MaxTemperatureMapper.class);

    job.setInputFormatClass(TextInputFormat.class);

    job.setOutputFormatClass(TextOutputFormat.class);

    job.setMapOutputKeyClass(Text.class);

    job.setMapOutputValueClass(Text.class);

    Path ip = new Path("C:/Users/CVR/Desktop/inp.txt");

    Path op = new Path("C:/Users/CVR/Desktop/qwer");

    FileInputFormat.addInputPath(job,ip);

    FileOutputFormat.setOutputPath(job,op);

    op.getFileSystem(conf).delete(op);

    System.exit(job.waitForCompletion(true)?0:1);

  }

}



